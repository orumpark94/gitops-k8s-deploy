- name: Deploy ArgoCD to Kubernetes
  hosts: master
  become: yes
  tasks:

    - name: Check if Helm is installed
      stat:
        path: /usr/local/bin/helm
      register: helm_installed

    - name: Install Helm if not installed (using shell)
      shell: "curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
      when: not helm_installed.stat.exists

    - name: Download Helm binary if not installed
      get_url:
        url: "https://get.helm.sh/helm-v3.14.0-linux-amd64.tar.gz"
        dest: "/tmp/helm.tar.gz"
      when: not helm_installed.stat.exists

    - name: Extract Helm binary
      command: tar -zxvf /tmp/helm.tar.gz -C /tmp
      when: not helm_installed.stat.exists

    - name: Move Helm binary to /usr/local/bin
      command: mv /tmp/linux-amd64/helm /usr/local/bin/helm
      when: not helm_installed.stat.exists

    - name: Ensure Helm is executable
      file:
        path: /usr/local/bin/helm
        mode: '0755'
      when: not helm_installed.stat.exists

    - name: Add ArgoCD Helm repository
      command: helm repo add argo https://argoproj.github.io/argo-helm

    - name: Update Helm repositories
      command: helm repo update

    - name: Create ArgoCD namespace if not exists
      shell: kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

    - name: Check if ArgoCD is already installed
      command: helm list -n argocd -q
      register: argocd_installed
      changed_when: false
      failed_when: false

    - name: Install or Upgrade ArgoCD using Helm
      command: >
        helm {{ 'upgrade --force --debug --timeout 600s' if argocd_installed.stdout else 'install' }} argocd argo/argo-cd
        --namespace argocd --create-namespace

    - name: Wait for ArgoCD server to be ready
      command: >
        kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd

    - name: Expose ArgoCD server as a LoadBalancer (optional)
      command: >
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

    - name: Retrieve ArgoCD admin password
      shell: >
        kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode
      register: argocd_password
      changed_when: false

    - name: Print ArgoCD admin password
      debug:
        msg: "ArgoCD Admin Password: {{ argocd_password.stdout }}"

