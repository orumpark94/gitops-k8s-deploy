- name: Deploy ArgoCD + Helm for GitOps
  hosts: master
  become: yes
  tasks:

    # 🟢 1️⃣ ArgoCD 설치
    - name: Create ArgoCD namespace
      shell: kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

    - name: Install ArgoCD
      shell: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: Wait for ArgoCD to be ready
      shell: kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

    - name: Expose ArgoCD server using port-forwarding
      shell: nohup kubectl port-forward svc/argocd-server -n argocd 8080:443 > /dev/null 2>&1 &
      async: 10
      poll: 0

    # 🟢 2️⃣ 초기 관리자 비밀번호 확인 및 Secret 설정
    - name: Get ArgoCD initial admin password
      shell: >
        kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode
      register: argocd_admin_password
      changed_when: false
      ignore_errors: yes  # secret이 없더라도 진행 가능하도록 설정

    - name: Log into ArgoCD CLI
      shell: argocd login localhost:8080 --username admin --password "{{ argocd_admin_password.stdout | default('')}}"
        --insecure
      ignore_errors: yes

    # 🟢 3️⃣ `argocd-redis` 및 `argocd-repo-server-tls` Secret 강제 생성
    - name: Ensure `argocd-redis` Secret exists
      shell: |
        if ! kubectl get secret -n argocd argocd-redis &> /dev/null; then
          kubectl create secret generic argocd-redis -n argocd \
            --from-literal=auth=$(openssl rand -hex 16)
        fi
      register: create_redis_secret
      changed_when: create_redis_secret.rc == 0

    - name: Ensure `argocd-repo-server-tls` Secret exists
      shell: |
        if ! kubectl get secret -n argocd argocd-repo-server-tls &> /dev/null; then
          kubectl create secret generic argocd-repo-server-tls -n argocd
        fi
      register: create_repo_tls_secret
      changed_when: create_repo_tls_secret.rc == 0

    # ✅ 🛠️ 특정 상태의 ArgoCD Pod만 재시작
    - name: Restart only problematic ArgoCD Pods
      shell: |
        for pod in $(kubectl get pods -n argocd --no-headers | awk '$3 ~ /CreateContainerConfigError|CrashLoopBackOff/ {print $1}'); do
          kubectl delete pod -n argocd $pod
        done
      register: restart_problematic_pods
      changed_when: restart_problematic_pods.rc == 0

    # ✅ 🛠️ ArgoCD Deployment 및 StatefulSet 롤링 업데이트 (서비스 다운 최소화)
    - name: Rollout restart ArgoCD deployments
      shell: kubectl rollout restart deployment -n argocd
      register: restart_deployments
      changed_when: restart_deployments.rc == 0

    - name: Rollout restart ArgoCD statefulsets
      shell: kubectl rollout restart statefulset -n argocd
      register: restart_statefulsets
      changed_when: restart_statefulsets.rc == 0

    # 🟢 5️⃣ Helm 설치 및 디렉토리 생성
    - name: Check if Helm is installed
      shell: command -v helm
      register: helm_installed
      ignore_errors: yes
      changed_when: false

    - name: Install Helm if not installed
      shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      when: helm_installed.rc != 0

    - name: Ensure Helm charts directory exists
      file:
        path: charts/my-app
        state: directory
        mode: '0755'

    # 🟢 6️⃣ ArgoCD에서 GitOps 저장소 감시 설정
    - name: Add GitOps repository to ArgoCD
      shell: argocd repo add https://github.com/orumpark94/gitops-k8s-deploy.git
      ignore_errors: yes

    - name: Create ArgoCD application for Helm-based GitOps
      shell: >
        argocd app create gitops-helm-app
        --repo https://github.com/orumpark94/gitops-k8s-deploy.git
        --path charts/my-app
        --dest-server https://kubernetes.default.svc
        --dest-namespace default
        --sync-policy automated
        --helm-set replicaCount=2
      ignore_errors: yes

    - name: Sync ArgoCD application
      shell: argocd app sync gitops-helm-app
      ignore_errors: yes